# modules/ui.py
from __future__ import annotations

import requests
import streamlit as st
import pandas as pd
import os
import shutil

from datetime import date, timedelta
from typing import Optional, Tuple
from streamlit.errors import StreamlitAuthError

# Valor por defecto para evitar d√≠as incompletos en GSC
LAG_DAYS_DEFAULT = 3


# ---------------------------
# Helpers de usuario / sidebar
# ---------------------------
def get_user():
    """Compatibilidad con versiones de Streamlit: st.user o st.experimental_user."""
    return getattr(st, "user", getattr(st, "experimental_user", None))


def get_first_name(full_name: Optional[str]) -> str:
    if not full_name:
        return "üëã"
    return full_name.split()[0]


def sidebar_user_info(user):
    with st.sidebar:
        with st.container():
            c1, c2 = st.columns([1, 3])
            with c1:
                if getattr(user, "picture", None):
                    try:
                        r = requests.get(user.picture, timeout=5)
                        if r.status_code == 200:
                            st.image(r.content, width=96)
                        else:
                            st.warning("No se pudo cargar la imagen.")
                    except Exception as e:
                        st.warning(f"Error al cargar la imagen: {e}")
                else:
                    st.info("Sin imagen de perfil.")
            with c2:
                st.header("Informaci√≥n del usuario", anchor=False)
                st.write(f"**Nombre:** {getattr(user, 'name', '‚Äî')}")
                st.write(f"**Correo:** {getattr(user, 'email', '‚Äî')}")

        # ‚¨áÔ∏è Bot√≥n de limpieza (arriba del bot√≥n de cerrar sesi√≥n)
        st.divider()
        st.markdown("**üßπ Mantenimiento**")
        if st.button("Borrar cach√© del paquete externo (.ext_pkgs/)", key="btn_clean_extpkgs", use_container_width=True):
            try:
                shutil.rmtree(".ext_pkgs", ignore_errors=True)
                st.success("‚úÖ Cach√© borrada. Hac√© *Rerun* para reinstalar el paquete externo.")
            except Exception as e:
                st.error(f"No pude borrar .ext_pkgs: {e}")

        st.divider()
        st.button(":material/logout: Cerrar sesi√≥n", on_click=st.logout, use_container_width=True)



# ---------------------------
# Pantalla de login (Auth Streamlit)
# ---------------------------
def login_screen() -> None:
    st.header("Esta aplicaci√≥n es privada.")
    st.subheader("Por favor, inicia sesi√≥n.")

    if st.button(":material/login: Iniciar sesi√≥n con Google"):
        try:
            # Si Auth no est√° configurado, Streamlit lanza StreamlitAuthError.
            st.login()
        except StreamlitAuthError:
            st.error("La autenticaci√≥n de Streamlit no est√° configurada para este entorno.")
            st.caption(
                "En Streamlit Cloud: ve a **‚ãØ ‚Üí App settings ‚Üí Authentication**, "
                "activa el login y agrega tus emails o dominio permitido."
            )
        except Exception as e:
            st.error("No se pudo iniciar sesi√≥n con Streamlit Auth.")
            st.caption(f"Detalle t√©cnico (debug): {e}")
# -----------------------------
# Fondo y logo
# -----------------------------
# === Branding helpers ===
import streamlit as st

def apply_page_style(page_bg: str = "#0f172a", use_gradient: bool = True):
    """
    Estilos base de la p√°gina.
    - page_bg: color base (oscuro recomendado para logo blanco)
    - use_gradient: crea banda superior oscura y resto claro; si es False, todo el fondo es oscuro
    """
    if use_gradient:
        # Banda superior oscura (200px) y resto claro
        css_bg = f"linear-gradient(180deg, {page_bg} 0, {page_bg} 220px, #ffffff 220px)"
    else:
        # Todo oscuro
        css_bg = page_bg

    st.markdown(
        f"""
        <style>
        .stApp {{
            background: {css_bg} !important;
        }}
        /* afina el padding superior del contenido */
        .block-container {{
            padding-top: 0.75rem !important;
        }}
        /* oculta la barra de Streamlit default si no te gusta */
        header[data-testid="stHeader"] {{
            background: transparent !important;
        }}
        </style>
        """,
        unsafe_allow_html=True,
    )

def render_brand_header(logo_url: str,
                        height_px: int = 54,
                        band_bg: str = "#0f172a"):
    """
    Inserta una franja superior con el logo (izquierda).
    Llamar justo antes del t√≠tulo principal.
    """
    st.markdown(
        f"""
        <div class="brand-banner" style="
            background:{band_bg};
            border-radius: 10px;
            margin: 0 0 12px 0;
            padding: 10px 16px;
            display: flex; align-items: center;
        ">
            <img src="{logo_url}" alt="Brand" style="height:{height_px}px; display:block;" />
        </div>
        """,
        unsafe_allow_html=True,
    )


# ---------------------------
# UI de Search Console y An√°lisis
# ---------------------------
def pick_site(sc_service) -> str:
    """
    Lista sitios verificados de la cuenta de Search Console conectada.
    Mantiene la selecci√≥n estable entre reruns usando un key fijo y el valor previo.
    """
    st.subheader("2) Eleg√≠ el sitio a trabajar (Search Console)")
    try:
        site_list = sc_service.sites().list().execute()
        sites = site_list.get("siteEntry", [])
    except Exception as e:
        st.error(f"Error al obtener sitios: {e}")
        st.stop()

    # Solo sitios verificados
    verified_urls = [s["siteUrl"] for s in sites if s.get("permissionLevel") != "siteUnverifiedUser"]

    # Orden estable y sin duplicados (sc-domain primero, luego hosts, todo casefold)
    def _sort_key(u: str) -> tuple[int, str]:
        return (0 if u.startswith("sc-domain:") else 1, u.replace("sc-domain:", "").casefold())

    options = sorted(set(verified_urls), key=_sort_key)

    if not options:
        st.error("No se encontraron sitios verificados en esta cuenta.")
        st.stop()

    # Recordar selecci√≥n previa (si existe) y mantenerla tras el rerun
    prev = st.session_state.get("site_url")
    index = options.index(prev) if prev in options else 0

    site_url = st.selectbox(
        "Sitio verificado:",
        options,
        index=index,
        key="site_url",  # clave estable: mantiene el valor entre reruns
    )
    return site_url


def pick_analysis() -> str:
    """Selector de an√°lisis. Devuelve '4' o '5' (otros pendientes)."""
    st.subheader("3) Eleg√≠ el tipo de an√°lisis")
    opciones = {
        "1. An√°lisis de entidades (üöß pr√≥ximamente)": "1",
        "2. An√°lisis de tr√°fico general (üöß pr√≥ximamente)": "2",
        "3. An√°lisis de secciones (üöß pr√≥ximamente)": "3",
        "4. An√°lisis de impacto de Core Update ‚úÖ": "4",
        "5. An√°lisis de tr√°fico evergreen ‚úÖ": "5",
    }
    key = st.radio("Tipos disponibles:", list(opciones.keys()), index=3)
    return opciones[key]


def params_for_core_update() -> Tuple[int, date, str, Optional[date], str, Optional[str], Optional[str]]:
    """UI para par√°metros del an√°lisis de Core Update."""
    st.markdown("#### Par√°metros (Core Update)")

    lag_days = st.number_input(
        "Lag de datos (para evitar d√≠as incompletos)",
        min_value=0, max_value=7, value=LAG_DAYS_DEFAULT
    )

    fecha_inicio = st.date_input("¬øCu√°ndo inici√≥ el Core Update? (YYYY-MM-DD)")
    termino = st.radio("¬øEl Core Update ya termin√≥?", ["s√≠", "no"], horizontal=True)
    fecha_fin = st.date_input("¬øCu√°ndo finaliz√≥ el Core Update? (YYYY-MM-DD)") if termino == "s√≠" else None

    tipo = st.selectbox("Datos a analizar", ["Search", "Discover", "Ambos"], index=2)
    pais_choice = st.selectbox(
        "¬øFiltrar por pa√≠s? (ISO-3)",
        ["Todos", "ARG", "MEX", "ESP", "USA", "COL", "PER", "CHL", "URY"],
        index=0,
    )
    pais = None if pais_choice == "Todos" else pais_choice
    seccion = st.text_input("¬øLimitar a una secci√≥n? (path, ej: /vida/)", value="") or None

    return lag_days, fecha_inicio, termino, fecha_fin, tipo, pais, seccion


def params_for_evergreen():
    """UI para par√°metros del an√°lisis Evergreen + c√°lculo de ventana mensual (hasta 16 meses)."""
    st.markdown("#### Par√°metros (Evergreen)")
    st.caption("Se usa el per√≠odo m√°s amplio posible de **meses completos** (hasta 16) en Search.")

    lag_days = st.number_input(
        "Lag de datos (para evitar d√≠as incompletos)",
        min_value=0, max_value=7, value=LAG_DAYS_DEFAULT
    )

    pais_choice = st.selectbox(
        "¬øFiltrar por pa√≠s? (ISO-3)",
        ["Todos", "ARG", "MEX", "ESP", "USA", "COL", "PER", "CHL", "URY"],
        index=0,
    )
    pais = None if pais_choice == "Todos" else pais_choice
    seccion = st.text_input("¬øLimitar a una secci√≥n? (path, ej: /vida/)", value="") or None
    incluir_diario = st.checkbox("Incluir an√°lisis diario por URL (lento)", value=False)

    # Ventana de 16 meses completos terminando en el √∫ltimo mes cerrado
    hoy_util = date.today() - timedelta(days=lag_days)
    end_month_first_day = (pd.Timestamp(hoy_util.replace(day=1)) - pd.offsets.MonthBegin(1))
    end_month_last_day = (end_month_first_day + pd.offsets.MonthEnd(0))
    start_month_first_day = (end_month_first_day - pd.DateOffset(months=15))
    start_date = start_month_first_day.date()
    end_date = end_month_last_day.date()

    st.info(f"Ventana mensual: {start_date} ‚Üí {end_date}")

    return lag_days, pais, seccion, incluir_diario, start_date, end_date
